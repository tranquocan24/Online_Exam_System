// auth.js - X·ª≠ l√Ω ƒëƒÉng nh·∫≠p v√† ph√¢n quy·ªÅn

class Auth {
    constructor() {
        this.users = null;
        this.init();
    }

    async init() {
        // Load danh s√°ch users t·ª´ server
        await this.loadUsers();
        
        // Bind form events n·∫øu c√≥ form login
        this.bindLoginForm();
    }

    // Load danh s√°ch users t·ª´ server
    async loadUsers() {
        try {
            const response = await fetch('/api/users');
            if (response.ok) {
                this.users = await response.json();
            } else {
                // Fallback: s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u
                this.users = this.getDefaultUsers();
            }
        } catch (error) {
            console.log('S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u');
            this.users = this.getDefaultUsers();
        }
    }

    // D·ªØ li·ªáu users m·∫´u
    getDefaultUsers() {
        return {
            students: [
                {
                    id: "SV001",
                    username: "sv001",
                    password: "123456",
                    name: "Nguy·ªÖn VƒÉn A",
                    class: "CNTT01",
                    role: "student"
                },
                {
                    id: "SV002",
                    username: "sv002",
                    password: "123456",
                    name: "Tr·∫ßn Th·ªã B",
                    class: "CNTT01",
                    role: "student"
                }
            ],
            teachers: [
                {
                    id: "GV001",
                    username: "gv001",
                    password: "123456",
                    name: "PGS.TS Nguy·ªÖn VƒÉn C",
                    subject: "L·∫≠p tr√¨nh Web",
                    role: "teacher"
                }
            ],
            admins: [
                {
                    id: "AD001",
                    username: "admin",
                    password: "admin123",
                    name: "Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng",
                    role: "admin"
                }
            ]
        };
    }

    // Bind events cho form ƒëƒÉng nh·∫≠p
    bindLoginForm() {
        console.log('Binding login form events...');
        
        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            // Remove existing event listeners to prevent duplicates
            const newForm = loginForm.cloneNode(true);
            loginForm.parentNode.replaceChild(newForm, loginForm);
            
            // Bind new event listener
            newForm.addEventListener('submit', (e) => this.handleLogin(e));
        }

        // Auto-fill remembered username
        this.loadRememberedUser();

        // Th√™m demo accounts v·ªõi retry ƒë·ªÉ ƒë·∫£m b·∫£o ƒë∆∞·ª£c th√™m
        this.addDemoAccountsInfo();
        
        // Add keyboard shortcuts
        this.addKeyboardShortcuts();
    }

    // Load remembered username
    loadRememberedUser() {
        const rememberedUser = localStorage.getItem('rememberUser');
        if (rememberedUser) {
            const usernameField = document.getElementById('username');
            const rememberCheckbox = document.getElementById('rememberMe');
            
            if (usernameField) {
                usernameField.value = rememberedUser;
            }
            if (rememberCheckbox) {
                rememberCheckbox.checked = true;
            }
        }
    }

    // Add keyboard shortcuts
    addKeyboardShortcuts() {
        // Remove existing keyboard shortcuts first
        if (this._keyboardHandler) {
            document.removeEventListener('keydown', this._keyboardHandler);
        }
        
        // Create new handler
        this._keyboardHandler = (e) => {
            // Alt + L to focus on login form
            if (e.altKey && e.key === 'l') {
                e.preventDefault();
                const usernameField = document.getElementById('username');
                if (usernameField) {
                    usernameField.focus();
                }
            }
            
            // Escape to clear form
            if (e.key === 'Escape') {
                const loginForm = document.getElementById('loginForm');
                if (loginForm) {
                    loginForm.reset();
                    this.showMessage('', 'info');
                }
            }
        };
        
        document.addEventListener('keydown', this._keyboardHandler);
    }

    // Hi·ªÉn th·ªã th√¥ng tin t√†i kho·∫£n demo
    addDemoAccountsInfo() {
        const tryAddDemo = () => {
            // Try both the placeholder and the container
            const placeholder = document.getElementById('demo-accounts-placeholder');
            const container = document.querySelector('.login-container');
            const targetElement = placeholder || container;
            
            // Ki·ªÉm tra xem demo info ƒë√£ t·ªìn t·∫°i ch∆∞a
            if (document.querySelector('.demo-accounts')) {
                console.log('Demo accounts already added');
                return;
            }
            
            if (targetElement) {
                console.log('Adding demo accounts info to:', targetElement.id || targetElement.className);
                const demoInfo = document.createElement('div');
                demoInfo.className = 'demo-accounts';
                demoInfo.innerHTML = `
                    <div class="demo-info">
                        <h4>T√†i kho·∫£n demo:</h4>
                        <div class="demo-grid">
                            <div class="demo-account" onclick="Auth.fillDemoAccount('sv001', '123456')">
                                <strong>Sinh vi√™n:</strong><br>
                                Username: sv001<br>
                                Password: 123456<br>
                                <small>Click ƒë·ªÉ ƒëi·ªÅn t·ª± ƒë·ªông</small>
                            </div>
                            <div class="demo-account" onclick="Auth.fillDemoAccount('gv001', '123456')">
                                <strong>Gi√°o vi√™n:</strong><br>
                                Username: gv001<br>
                                Password: 123456<br>
                                <small>Click ƒë·ªÉ ƒëi·ªÅn t·ª± ƒë·ªông</small>
                            </div>
                            <div class="demo-account" onclick="Auth.fillDemoAccount('admin', 'admin123')">
                                <strong>Qu·∫£n tr·ªã vi√™n:</strong><br>
                                Username: admin<br>
                                Password: admin123<br>
                                <small>Click ƒë·ªÉ ƒëi·ªÅn t·ª± ƒë·ªông</small>
                            </div>
                        </div>
                        <div class="keyboard-shortcuts">
                            <small>
                                üí° <strong>Ph√≠m t·∫Øt:</strong> Alt+L ƒë·ªÉ focus v√†o form, Esc ƒë·ªÉ x√≥a form
                            </small>
                        </div>
                    </div>
                `;
                
                // Th√™m CSS cho demo info n·∫øu ch∆∞a c√≥
                if (!document.querySelector('#demo-accounts-styles')) {
                    const style = document.createElement('style');
                    style.id = 'demo-accounts-styles';
                    style.textContent = `
                        .demo-accounts {
                            margin-top: 20px;
                            padding: 20px;
                            background: #f8f9fa;
                            border-radius: 8px;
                            border-left: 4px solid #667eea;
                        }
                        .demo-info h4 {
                            margin-bottom: 15px;
                            color: #2d3748;
                        }
                        .demo-grid {
                            display: grid;
                            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                            gap: 15px;
                            margin-bottom: 15px;
                        }
                        .demo-account {
                            background: white;
                            padding: 15px;
                            border-radius: 6px;
                            font-size: 14px;
                            line-height: 1.4;
                            cursor: pointer;
                            transition: all 0.3s ease;
                            border: 2px solid transparent;
                        }
                        .demo-account:hover {
                            border-color: #667eea;
                            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.15);
                            transform: translateY(-1px);
                        }
                        .demo-account small {
                            color: #667eea;
                            font-style: italic;
                            display: block;
                            margin-top: 5px;
                        }
                        .keyboard-shortcuts {
                            text-align: center;
                            padding: 10px;
                            background: rgba(102, 126, 234, 0.1);
                            border-radius: 4px;
                        }
                        .keyboard-shortcuts small {
                            color: #4a5568;
                        }
                        @media (max-width: 480px) {
                            .demo-grid {
                                grid-template-columns: 1fr;
                            }
                        }
                    `;
                    document.head.appendChild(style);
                }
                
                // If using placeholder, replace it; if using container, append to it
                if (placeholder) {
                    placeholder.parentNode.replaceChild(demoInfo, placeholder);
                } else {
                    container.appendChild(demoInfo);
                }
                
            } else {
                console.log('No target element found for demo accounts, retrying...');
                // Retry sau 100ms n·∫øu container ch∆∞a s·∫µn s√†ng
                setTimeout(tryAddDemo, 100);
            }
        };
        
        // Th·ª±c hi·ªán ngay l·∫≠p t·ª©c ho·∫∑c khi DOM s·∫µn s√†ng
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', tryAddDemo);
        } else {
            tryAddDemo();
        }
    }

    // Fill demo account info
    static fillDemoAccount(username, password) {
        const usernameField = document.getElementById('username');
        const passwordField = document.getElementById('password');
        const messageDiv = document.getElementById('loginMessage');
        
        if (usernameField && passwordField) {
            usernameField.value = username;
            passwordField.value = password;
            
            // Show feedback
            if (messageDiv) {
                messageDiv.textContent = `ƒê√£ ƒëi·ªÅn th√¥ng tin t√†i kho·∫£n ${username === 'sv001' ? 'sinh vi√™n' : 'gi√°o vi√™n'}`;
                messageDiv.className = 'login-message info';
            }
            
            // Focus on submit button
            const submitBtn = document.querySelector('#loginForm button[type="submit"]');
            if (submitBtn) {
                submitBtn.focus();
            }
        }
    }

    // X·ª≠ l√Ω ƒëƒÉng nh·∫≠p
    async handleLogin(e) {
        e.preventDefault();
        
        const username = document.getElementById('username').value.trim();
        const password = document.getElementById('password').value;
        const rememberMe = document.getElementById('rememberMe')?.checked || false;
        const messageDiv = document.getElementById('loginMessage');
        const submitBtn = e.target.querySelector('button[type="submit"]');
        
        // Clear previous messages
        if (messageDiv) {
            messageDiv.textContent = '';
            messageDiv.className = 'login-message';
        }
        
        // Validate input
        const validation = this.validateLoginInput(username, password);
        if (!validation.isValid) {
            this.showMessage(validation.message, 'error');
            return;
        }
        
        // Disable submit button v√† show loading
        if (submitBtn) {
            submitBtn.disabled = true;
            submitBtn.textContent = 'ƒêang ƒëƒÉng nh·∫≠p...';
        }
        this.showMessage('ƒêang x√°c th·ª±c th√¥ng tin...', 'info');
        
        try {
            // Simulate API call delay
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            const user = this.validateCredentials(username, password);
            
            if (user) {
                // Log successful login
                this.logLoginAttempt(username, true);
                
                // Handle remember me
                if (rememberMe) {
                    localStorage.setItem('rememberUser', username);
                } else {
                    localStorage.removeItem('rememberUser');
                }
                
                this.showMessage('ƒêƒÉng nh·∫≠p th√†nh c√¥ng!', 'success');
                
                // Delay ƒë·ªÉ user th·∫•y th√¥ng b√°o th√†nh c√¥ng
                setTimeout(() => {
                    if (window.app) {
                        window.app.handleLoginSuccess(user);
                    } else {
                        // Fallback: wait for app to be ready
                        this.waitForAppAndLogin(user);
                    }
                }, 500);
            } else {
                // Log failed login
                this.logLoginAttempt(username, false);
                this.showMessage('T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng', 'error');
                
                // Security: add delay after failed login
                await new Promise(resolve => setTimeout(resolve, 2000));
            }
            
        } catch (error) {
            console.error('Login error:', error);
            this.showMessage('L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau', 'error');
        } finally {
            // Re-enable submit button
            if (submitBtn) {
                submitBtn.disabled = false;
                submitBtn.textContent = 'ƒêƒÉng nh·∫≠p';
            }
        }
    }

    // Validate login input
    validateLoginInput(username, password) {
        if (!username || !password) {
            return {
                isValid: false,
                message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin ƒëƒÉng nh·∫≠p'
            };
        }
        
        if (username.length < 3) {
            return {
                isValid: false,
                message: 'T√™n ƒëƒÉng nh·∫≠p ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±'
            };
        }
        
        if (password.length < 6) {
            return {
                isValid: false,
                message: 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±'
            };
        }
        
        // Check for basic injection attempts
        const dangerousChars = ['<', '>', '"', "'", '&', 'script', 'SELECT', 'DROP'];
        const inputText = (username + password).toLowerCase();
        for (const char of dangerousChars) {
            if (inputText.includes(char.toLowerCase())) {
                return {
                    isValid: false,
                    message: 'Th√¥ng tin ƒëƒÉng nh·∫≠p ch·ª©a k√Ω t·ª± kh√¥ng h·ª£p l·ªá'
                };
            }
        }
        
        return { isValid: true };
    }

    // Log login attempts (simple security logging)
    logLoginAttempt(username, success) {
        const timestamp = new Date().toISOString();
        const attempt = {
            username,
            success,
            timestamp,
            ip: 'localhost' // In real app, get actual IP
        };
        
        // Store in localStorage for demo (in real app, send to server)
        const attempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');
        attempts.push(attempt);
        
        // Keep only last 10 attempts
        if (attempts.length > 10) {
            attempts.splice(0, attempts.length - 10);
        }
        
        localStorage.setItem('loginAttempts', JSON.stringify(attempts));
    }

    // Validate th√¥ng tin ƒëƒÉng nh·∫≠p
    validateCredentials(username, password) {
        if (!this.users) return null;
        
        // Ki·ªÉm tra trong danh s√°ch sinh vi√™n
        if (this.users.students) {
            for (const student of this.users.students) {
                if (student.username === username && student.password === password) {
                    return student;
                }
            }
        }
        
        // Ki·ªÉm tra trong danh s√°ch gi√°o vi√™n
        if (this.users.teachers) {
            for (const teacher of this.users.teachers) {
                if (teacher.username === username && teacher.password === password) {
                    return teacher;
                }
            }
        }
        
        // Ki·ªÉm tra trong danh s√°ch admin
        if (this.users.admins) {
            for (const admin of this.users.admins) {
                if (admin.username === username && admin.password === password) {
                    return admin;
                }
            }
        }
        
        return null;
    }

    // Wait for app to be ready then login
    waitForAppAndLogin(user) {
        const checkApp = () => {
            if (window.app) {
                window.app.handleLoginSuccess(user);
            } else {
                setTimeout(checkApp, 100);
            }
        };
        checkApp();
    }

    // Hi·ªÉn th·ªã th√¥ng b√°o
    showMessage(message, type = 'info') {
        const messageDiv = document.getElementById('loginMessage');
        if (messageDiv) {
            messageDiv.textContent = message;
            messageDiv.className = `login-message ${type}`;
        }
    }

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    hasPermission(user, action) {
        if (!user) return false;
        
        const permissions = {
            student: ['view_exams', 'take_exam', 'view_results'],
            teacher: ['create_exam', 'manage_exams', 'view_all_results', 'edit_exam']
        };
        
        return permissions[user.role]?.includes(action) || false;
    }

    // L·∫•y th√¥ng tin user hi·ªán t·∫°i
    getCurrentUser() {
        const saved = localStorage.getItem('currentUser');
        return saved ? JSON.parse(saved) : null;
    }

    // Logout
    logout() {
        localStorage.removeItem('currentUser');
        if (window.app) {
            window.app.logout();
        }
    }
}

// Kh·ªüi t·∫°o Auth khi script ƒë∆∞·ª£c load (ch·ªâ n·∫øu ch∆∞a c√≥)
if (!window.Auth) {
    window.Auth = new Auth();
}
